/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **academie**
   * - Table in database
   */
  export namespace academie {
    export type Table = 'academie';
    export interface Selectable {
      /**
      * **academie.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie: string;
      /**
      * **academie.libelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelle: string;
      /**
      * **academie.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion: string;
    }
    export interface JSONSelectable {
      /**
      * **academie.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie: string;
      /**
      * **academie.libelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelle: string;
      /**
      * **academie.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion: string;
    }
    export interface Whereable {
      /**
      * **academie.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **academie.libelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelle?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **academie.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **academie.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **academie.libelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelle: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **academie.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **academie.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **academie.libelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelle?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **academie.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'academie_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **departement**
   * - Table in database
   */
  export namespace departement {
    export type Table = 'departement';
    export interface Selectable {
      /**
      * **departement.codeDepartement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeDepartement: string;
      /**
      * **departement.libelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelle: string;
      /**
      * **departement.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie: string;
      /**
      * **departement.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion: string;
    }
    export interface JSONSelectable {
      /**
      * **departement.codeDepartement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeDepartement: string;
      /**
      * **departement.libelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelle: string;
      /**
      * **departement.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie: string;
      /**
      * **departement.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion: string;
    }
    export interface Whereable {
      /**
      * **departement.codeDepartement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeDepartement?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **departement.libelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelle?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **departement.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **departement.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **departement.codeDepartement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeDepartement: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **departement.libelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelle: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **departement.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **departement.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **departement.codeDepartement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeDepartement?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **departement.libelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelle?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **departement.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **departement.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'departement_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **dispositif**
   * - Table in database
   */
  export namespace dispositif {
    export type Table = 'dispositif';
    export interface Selectable {
      /**
      * **dispositif.codeDispositif**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeDispositif: string;
      /**
      * **dispositif.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string;
      /**
      * **dispositif.libelleDispositif**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDispositif: string;
    }
    export interface JSONSelectable {
      /**
      * **dispositif.codeDispositif**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeDispositif: string;
      /**
      * **dispositif.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string;
      /**
      * **dispositif.libelleDispositif**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDispositif: string;
    }
    export interface Whereable {
      /**
      * **dispositif.codeDispositif**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeDispositif?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dispositif.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dispositif.libelleDispositif**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDispositif?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **dispositif.codeDispositif**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeDispositif: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dispositif.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dispositif.libelleDispositif**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDispositif: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **dispositif.codeDispositif**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeDispositif?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dispositif.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dispositif.libelleDispositif**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDispositif?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'dispositif_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **etablissement**
   * - Table in database
   */
  export namespace etablissement {
    export type Table = 'etablissement';
    export interface Selectable {
      /**
      * **etablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **etablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI: string;
      /**
      * **etablissement.siret**
      * - `varchar` in database
      * - Nullable, no default
      */
      siret: string | null;
      /**
      * **etablissement.codeAcademie**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeAcademie: string | null;
      /**
      * **etablissement.natureUAI**
      * - `varchar` in database
      * - Nullable, no default
      */
      natureUAI: string | null;
      /**
      * **etablissement.libelleEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      libelleEtablissement: string | null;
      /**
      * **etablissement.adresseEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      adresseEtablissement: string | null;
      /**
      * **etablissement.codePostal**
      * - `varchar` in database
      * - Nullable, no default
      */
      codePostal: string | null;
      /**
      * **etablissement.secteur**
      * - `varchar` in database
      * - Nullable, no default
      */
      secteur: string | null;
      /**
      * **etablissement.dateOuverture**
      * - `date` in database
      * - Nullable, no default
      */
      dateOuverture: Date | null;
      /**
      * **etablissement.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture: Date | null;
      /**
      * **etablissement.codeMinistereTutuelle**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeMinistereTutuelle: string | null;
      /**
      * **etablissement.codeRegion**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeRegion: string | null;
      /**
      * **etablissement.codeDepartement**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeDepartement: string | null;
    }
    export interface JSONSelectable {
      /**
      * **etablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **etablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI: string;
      /**
      * **etablissement.siret**
      * - `varchar` in database
      * - Nullable, no default
      */
      siret: string | null;
      /**
      * **etablissement.codeAcademie**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeAcademie: string | null;
      /**
      * **etablissement.natureUAI**
      * - `varchar` in database
      * - Nullable, no default
      */
      natureUAI: string | null;
      /**
      * **etablissement.libelleEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      libelleEtablissement: string | null;
      /**
      * **etablissement.adresseEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      adresseEtablissement: string | null;
      /**
      * **etablissement.codePostal**
      * - `varchar` in database
      * - Nullable, no default
      */
      codePostal: string | null;
      /**
      * **etablissement.secteur**
      * - `varchar` in database
      * - Nullable, no default
      */
      secteur: string | null;
      /**
      * **etablissement.dateOuverture**
      * - `date` in database
      * - Nullable, no default
      */
      dateOuverture: db.DateString | null;
      /**
      * **etablissement.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture: db.DateString | null;
      /**
      * **etablissement.codeMinistereTutuelle**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeMinistereTutuelle: string | null;
      /**
      * **etablissement.codeRegion**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeRegion: string | null;
      /**
      * **etablissement.codeDepartement**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeDepartement: string | null;
    }
    export interface Whereable {
      /**
      * **etablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.siret**
      * - `varchar` in database
      * - Nullable, no default
      */
      siret?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.codeAcademie**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeAcademie?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.natureUAI**
      * - `varchar` in database
      * - Nullable, no default
      */
      natureUAI?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.libelleEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      libelleEtablissement?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.adresseEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      adresseEtablissement?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.codePostal**
      * - `varchar` in database
      * - Nullable, no default
      */
      codePostal?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.secteur**
      * - `varchar` in database
      * - Nullable, no default
      */
      secteur?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.dateOuverture**
      * - `date` in database
      * - Nullable, no default
      */
      dateOuverture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.codeMinistereTutuelle**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeMinistereTutuelle?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.codeRegion**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeRegion?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.codeDepartement**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeDepartement?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **etablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **etablissement.siret**
      * - `varchar` in database
      * - Nullable, no default
      */
      siret?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.codeAcademie**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeAcademie?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.natureUAI**
      * - `varchar` in database
      * - Nullable, no default
      */
      natureUAI?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.libelleEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      libelleEtablissement?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.adresseEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      adresseEtablissement?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.codePostal**
      * - `varchar` in database
      * - Nullable, no default
      */
      codePostal?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.secteur**
      * - `varchar` in database
      * - Nullable, no default
      */
      secteur?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.dateOuverture**
      * - `date` in database
      * - Nullable, no default
      */
      dateOuverture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.codeMinistereTutuelle**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeMinistereTutuelle?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.codeRegion**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeRegion?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.codeDepartement**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeDepartement?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **etablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **etablissement.siret**
      * - `varchar` in database
      * - Nullable, no default
      */
      siret?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.codeAcademie**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeAcademie?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.natureUAI**
      * - `varchar` in database
      * - Nullable, no default
      */
      natureUAI?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.libelleEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      libelleEtablissement?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.adresseEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      adresseEtablissement?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.codePostal**
      * - `varchar` in database
      * - Nullable, no default
      */
      codePostal?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.secteur**
      * - `varchar` in database
      * - Nullable, no default
      */
      secteur?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.dateOuverture**
      * - `date` in database
      * - Nullable, no default
      */
      dateOuverture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.codeMinistereTutuelle**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeMinistereTutuelle?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.codeRegion**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeRegion?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.codeDepartement**
      * - `varchar` in database
      * - Nullable, no default
      */
      codeDepartement?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'etablissement_UAI_key' | 'etablissement_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **familleMetier**
   * - Table in database
   */
  export namespace familleMetier {
    export type Table = 'familleMetier';
    export interface Selectable {
      /**
      * **familleMetier.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **familleMetier.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille: string;
      /**
      * **familleMetier.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite: string;
      /**
      * **familleMetier.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle: string;
      /**
      * **familleMetier.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille: string;
      /**
      * **familleMetier.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite: string;
    }
    export interface JSONSelectable {
      /**
      * **familleMetier.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **familleMetier.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille: string;
      /**
      * **familleMetier.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite: string;
      /**
      * **familleMetier.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle: string;
      /**
      * **familleMetier.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille: string;
      /**
      * **familleMetier.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite: string;
    }
    export interface Whereable {
      /**
      * **familleMetier.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **familleMetier.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **familleMetier.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **familleMetier.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **familleMetier.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **familleMetier.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **familleMetier.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **familleMetier.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **familleMetier.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **familleMetier.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **familleMetier.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **familleMetier.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **familleMetier.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **familleMetier.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **familleMetier.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **familleMetier.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **familleMetier.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **familleMetier.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'familleMetier_mefStat11Specialite_key' | 'familleMetier_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **formation**
   * - Table in database
   */
  export namespace formation {
    export type Table = 'formation';
    export interface Selectable {
      /**
      * **formation.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **formation.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string;
      /**
      * **formation.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp: number;
      /**
      * **formation.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome: string;
      /**
      * **formation.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string;
      /**
      * **formation.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture: Date;
      /**
      * **formation.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **formation.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **formation.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string;
      /**
      * **formation.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp: number;
      /**
      * **formation.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome: string;
      /**
      * **formation.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string;
      /**
      * **formation.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture: db.DateString;
      /**
      * **formation.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture: db.DateString | null;
    }
    export interface Whereable {
      /**
      * **formation.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formation.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formation.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formation.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formation.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formation.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formation.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **formation.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **formation.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formation.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **formation.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formation.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formation.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment;
      /**
      * **formation.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **formation.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **formation.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formation.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **formation.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formation.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formation.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment>;
      /**
      * **formation.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'formation_codeFormationDiplome_key' | 'formation_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **formationEtablissement**
   * - Table in database
   */
  export namespace formationEtablissement {
    export type Table = 'formationEtablissement';
    export interface Selectable {
      /**
      * **formationEtablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **formationEtablissement.cfd**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cfd: string;
      /**
      * **formationEtablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI: string;
      /**
      * **formationEtablissement.dispositifId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      dispositifId: string;
      /**
      * **formationEtablissement.voie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      voie: string;
    }
    export interface JSONSelectable {
      /**
      * **formationEtablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **formationEtablissement.cfd**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cfd: string;
      /**
      * **formationEtablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI: string;
      /**
      * **formationEtablissement.dispositifId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      dispositifId: string;
      /**
      * **formationEtablissement.voie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      voie: string;
    }
    export interface Whereable {
      /**
      * **formationEtablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formationEtablissement.cfd**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cfd?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formationEtablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formationEtablissement.dispositifId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      dispositifId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formationEtablissement.voie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      voie?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **formationEtablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **formationEtablissement.cfd**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cfd: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formationEtablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formationEtablissement.dispositifId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      dispositifId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formationEtablissement.voie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      voie: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **formationEtablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **formationEtablissement.cfd**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cfd?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formationEtablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formationEtablissement.dispositifId**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      dispositifId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formationEtablissement.voie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      voie?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'formationEtablissement_pkey' | 'formationetablissement_pk';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **formationHistorique**
   * - Table in database
   */
  export namespace formationHistorique {
    export type Table = 'formationHistorique';
    export interface Selectable {
      /**
      * **formationHistorique.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string;
      /**
      * **formationHistorique.ancienCFD**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ancienCFD: string;
    }
    export interface JSONSelectable {
      /**
      * **formationHistorique.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string;
      /**
      * **formationHistorique.ancienCFD**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ancienCFD: string;
    }
    export interface Whereable {
      /**
      * **formationHistorique.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formationHistorique.ancienCFD**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ancienCFD?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **formationHistorique.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formationHistorique.ancienCFD**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ancienCFD: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **formationHistorique.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formationHistorique.ancienCFD**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ancienCFD?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'formationhistorique_pk';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **indicateurEntree**
   * - Table in database
   */
  export namespace indicateurEntree {
    export type Table = 'indicateurEntree';
    export interface Selectable {
      /**
      * **indicateurEntree.formationEtablissementId**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      formationEtablissementId: string;
      /**
      * **indicateurEntree.millesimeEntree**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesimeEntree: string;
      /**
      * **indicateurEntree.capacite**
      * - `int4` in database
      * - Nullable, no default
      */
      capacite: number | null;
      /**
      * **indicateurEntree.effectifEntree**
      * - `int4` in database
      * - Nullable, no default
      */
      effectifEntree: number | null;
      /**
      * **indicateurEntree.nbPremiersVoeux**
      * - `int4` in database
      * - Nullable, no default
      */
      nbPremiersVoeux: number | null;
    }
    export interface JSONSelectable {
      /**
      * **indicateurEntree.formationEtablissementId**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      formationEtablissementId: string;
      /**
      * **indicateurEntree.millesimeEntree**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesimeEntree: string;
      /**
      * **indicateurEntree.capacite**
      * - `int4` in database
      * - Nullable, no default
      */
      capacite: number | null;
      /**
      * **indicateurEntree.effectifEntree**
      * - `int4` in database
      * - Nullable, no default
      */
      effectifEntree: number | null;
      /**
      * **indicateurEntree.nbPremiersVoeux**
      * - `int4` in database
      * - Nullable, no default
      */
      nbPremiersVoeux: number | null;
    }
    export interface Whereable {
      /**
      * **indicateurEntree.formationEtablissementId**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      formationEtablissementId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **indicateurEntree.millesimeEntree**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesimeEntree?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **indicateurEntree.capacite**
      * - `int4` in database
      * - Nullable, no default
      */
      capacite?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **indicateurEntree.effectifEntree**
      * - `int4` in database
      * - Nullable, no default
      */
      effectifEntree?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **indicateurEntree.nbPremiersVoeux**
      * - `int4` in database
      * - Nullable, no default
      */
      nbPremiersVoeux?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **indicateurEntree.formationEtablissementId**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      formationEtablissementId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **indicateurEntree.millesimeEntree**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesimeEntree: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **indicateurEntree.capacite**
      * - `int4` in database
      * - Nullable, no default
      */
      capacite?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **indicateurEntree.effectifEntree**
      * - `int4` in database
      * - Nullable, no default
      */
      effectifEntree?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **indicateurEntree.nbPremiersVoeux**
      * - `int4` in database
      * - Nullable, no default
      */
      nbPremiersVoeux?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **indicateurEntree.formationEtablissementId**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      formationEtablissementId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **indicateurEntree.millesimeEntree**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesimeEntree?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **indicateurEntree.capacite**
      * - `int4` in database
      * - Nullable, no default
      */
      capacite?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **indicateurEntree.effectifEntree**
      * - `int4` in database
      * - Nullable, no default
      */
      effectifEntree?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **indicateurEntree.nbPremiersVoeux**
      * - `int4` in database
      * - Nullable, no default
      */
      nbPremiersVoeux?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'indicateurentree_pk';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **indicateurEtablissement**
   * - Table in database
   */
  export namespace indicateurEtablissement {
    export type Table = 'indicateurEtablissement';
    export interface Selectable {
      /**
      * **indicateurEtablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI: string;
      /**
      * **indicateurEtablissement.millesime**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesime: string;
      /**
      * **indicateurEtablissement.valeurAjoutee**
      * - `int4` in database
      * - Nullable, no default
      */
      valeurAjoutee: number | null;
    }
    export interface JSONSelectable {
      /**
      * **indicateurEtablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI: string;
      /**
      * **indicateurEtablissement.millesime**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesime: string;
      /**
      * **indicateurEtablissement.valeurAjoutee**
      * - `int4` in database
      * - Nullable, no default
      */
      valeurAjoutee: number | null;
    }
    export interface Whereable {
      /**
      * **indicateurEtablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **indicateurEtablissement.millesime**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesime?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **indicateurEtablissement.valeurAjoutee**
      * - `int4` in database
      * - Nullable, no default
      */
      valeurAjoutee?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **indicateurEtablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **indicateurEtablissement.millesime**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesime: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **indicateurEtablissement.valeurAjoutee**
      * - `int4` in database
      * - Nullable, no default
      */
      valeurAjoutee?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **indicateurEtablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **indicateurEtablissement.millesime**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesime?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **indicateurEtablissement.valeurAjoutee**
      * - `int4` in database
      * - Nullable, no default
      */
      valeurAjoutee?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'indicateuretablissement_pk';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **indicateurSortie**
   * - Table in database
   */
  export namespace indicateurSortie {
    export type Table = 'indicateurSortie';
    export interface Selectable {
      /**
      * **indicateurSortie.formationEtablissementId**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      formationEtablissementId: string;
      /**
      * **indicateurSortie.millesimeSortie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesimeSortie: string;
      /**
      * **indicateurSortie.reussite**
      * - `int4` in database
      * - Nullable, no default
      */
      reussite: number | null;
      /**
      * **indicateurSortie.effectifSortie**
      * - `int4` in database
      * - Nullable, no default
      */
      effectifSortie: number | null;
      /**
      * **indicateurSortie.nbSortants**
      * - `int4` in database
      * - Nullable, no default
      */
      nbSortants: number | null;
      /**
      * **indicateurSortie.nbPoursuiteEtudes**
      * - `int4` in database
      * - Nullable, no default
      */
      nbPoursuiteEtudes: number | null;
      /**
      * **indicateurSortie.nbInsertion6mois**
      * - `int4` in database
      * - Nullable, no default
      */
      nbInsertion6mois: number | null;
    }
    export interface JSONSelectable {
      /**
      * **indicateurSortie.formationEtablissementId**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      formationEtablissementId: string;
      /**
      * **indicateurSortie.millesimeSortie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesimeSortie: string;
      /**
      * **indicateurSortie.reussite**
      * - `int4` in database
      * - Nullable, no default
      */
      reussite: number | null;
      /**
      * **indicateurSortie.effectifSortie**
      * - `int4` in database
      * - Nullable, no default
      */
      effectifSortie: number | null;
      /**
      * **indicateurSortie.nbSortants**
      * - `int4` in database
      * - Nullable, no default
      */
      nbSortants: number | null;
      /**
      * **indicateurSortie.nbPoursuiteEtudes**
      * - `int4` in database
      * - Nullable, no default
      */
      nbPoursuiteEtudes: number | null;
      /**
      * **indicateurSortie.nbInsertion6mois**
      * - `int4` in database
      * - Nullable, no default
      */
      nbInsertion6mois: number | null;
    }
    export interface Whereable {
      /**
      * **indicateurSortie.formationEtablissementId**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      formationEtablissementId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **indicateurSortie.millesimeSortie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesimeSortie?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **indicateurSortie.reussite**
      * - `int4` in database
      * - Nullable, no default
      */
      reussite?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **indicateurSortie.effectifSortie**
      * - `int4` in database
      * - Nullable, no default
      */
      effectifSortie?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **indicateurSortie.nbSortants**
      * - `int4` in database
      * - Nullable, no default
      */
      nbSortants?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **indicateurSortie.nbPoursuiteEtudes**
      * - `int4` in database
      * - Nullable, no default
      */
      nbPoursuiteEtudes?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **indicateurSortie.nbInsertion6mois**
      * - `int4` in database
      * - Nullable, no default
      */
      nbInsertion6mois?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **indicateurSortie.formationEtablissementId**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      formationEtablissementId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **indicateurSortie.millesimeSortie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesimeSortie: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **indicateurSortie.reussite**
      * - `int4` in database
      * - Nullable, no default
      */
      reussite?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **indicateurSortie.effectifSortie**
      * - `int4` in database
      * - Nullable, no default
      */
      effectifSortie?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **indicateurSortie.nbSortants**
      * - `int4` in database
      * - Nullable, no default
      */
      nbSortants?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **indicateurSortie.nbPoursuiteEtudes**
      * - `int4` in database
      * - Nullable, no default
      */
      nbPoursuiteEtudes?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **indicateurSortie.nbInsertion6mois**
      * - `int4` in database
      * - Nullable, no default
      */
      nbInsertion6mois?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **indicateurSortie.formationEtablissementId**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      formationEtablissementId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **indicateurSortie.millesimeSortie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      millesimeSortie?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **indicateurSortie.reussite**
      * - `int4` in database
      * - Nullable, no default
      */
      reussite?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **indicateurSortie.effectifSortie**
      * - `int4` in database
      * - Nullable, no default
      */
      effectifSortie?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **indicateurSortie.nbSortants**
      * - `int4` in database
      * - Nullable, no default
      */
      nbSortants?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **indicateurSortie.nbPoursuiteEtudes**
      * - `int4` in database
      * - Nullable, no default
      */
      nbPoursuiteEtudes?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **indicateurSortie.nbInsertion6mois**
      * - `int4` in database
      * - Nullable, no default
      */
      nbInsertion6mois?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'indicateursortie_pk';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **knex_migrations**
   * - Table in database
   */
  export namespace knex_migrations {
    export type Table = 'knex_migrations';
    export interface Selectable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch: number | null;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch: number | null;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'knex_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **knex_migrations_lock**
   * - Table in database
   */
  export namespace knex_migrations_lock {
    export type Table = 'knex_migrations_lock';
    export interface Selectable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index: number;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked: number | null;
    }
    export interface JSONSelectable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index: number;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked: number | null;
    }
    export interface Whereable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'knex_migrations_lock_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **niveauDiplome**
   * - Table in database
   */
  export namespace niveauDiplome {
    export type Table = 'niveauDiplome';
    export interface Selectable {
      /**
      * **niveauDiplome.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string;
      /**
      * **niveauDiplome.libelleNiveauDiplome**
      * - `varchar` in database
      * - Nullable, no default
      */
      libelleNiveauDiplome: string | null;
    }
    export interface JSONSelectable {
      /**
      * **niveauDiplome.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string;
      /**
      * **niveauDiplome.libelleNiveauDiplome**
      * - `varchar` in database
      * - Nullable, no default
      */
      libelleNiveauDiplome: string | null;
    }
    export interface Whereable {
      /**
      * **niveauDiplome.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **niveauDiplome.libelleNiveauDiplome**
      * - `varchar` in database
      * - Nullable, no default
      */
      libelleNiveauDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **niveauDiplome.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **niveauDiplome.libelleNiveauDiplome**
      * - `varchar` in database
      * - Nullable, no default
      */
      libelleNiveauDiplome?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **niveauDiplome.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **niveauDiplome.libelleNiveauDiplome**
      * - `varchar` in database
      * - Nullable, no default
      */
      libelleNiveauDiplome?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'niveauDiplome_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pg_mate**
   * - Table in database
   */
  export namespace pg_mate {
    export type Table = 'pg_mate';
    export interface Selectable {
      /**
      * **pg_mate.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pg_mate_id_seq'::regclass)`
      */
      id: number;
      /**
      * **pg_mate.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **pg_mate.date**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      date: Date;
    }
    export interface JSONSelectable {
      /**
      * **pg_mate.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pg_mate_id_seq'::regclass)`
      */
      id: number;
      /**
      * **pg_mate.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **pg_mate.date**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      date: db.TimestampString;
    }
    export interface Whereable {
      /**
      * **pg_mate.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pg_mate_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_mate.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pg_mate.date**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      date?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pg_mate.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pg_mate_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **pg_mate.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **pg_mate.date**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      date: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pg_mate.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pg_mate_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **pg_mate.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **pg_mate.date**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      date?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'pg_mate_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **rawData**
   * - Table in database
   */
  export namespace rawData {
    export type Table = 'rawData';
    export interface Selectable {
      /**
      * **rawData.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **rawData.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data: db.JSONValue | null;
    }
    export interface JSONSelectable {
      /**
      * **rawData.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **rawData.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data: db.JSONValue | null;
    }
    export interface Whereable {
      /**
      * **rawData.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **rawData.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **rawData.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **rawData.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **rawData.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **rawData.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **region**
   * - Table in database
   */
  export namespace region {
    export type Table = 'region';
    export interface Selectable {
      /**
      * **region.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion: string;
      /**
      * **region.libelleRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleRegion: string;
    }
    export interface JSONSelectable {
      /**
      * **region.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion: string;
      /**
      * **region.libelleRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleRegion: string;
    }
    export interface Whereable {
      /**
      * **region.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **region.libelleRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleRegion?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **region.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **region.libelleRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleRegion: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **region.codeRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeRegion?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **region.libelleRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleRegion?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'region_libelleRegion_key' | 'region_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = academie.Table | departement.Table | dispositif.Table | etablissement.Table | familleMetier.Table | formation.Table | formationEtablissement.Table | formationHistorique.Table | indicateurEntree.Table | indicateurEtablissement.Table | indicateurSortie.Table | knex_migrations.Table | knex_migrations_lock.Table | niveauDiplome.Table | pg_mate.Table | rawData.Table | region.Table;
    export type Selectable = academie.Selectable | departement.Selectable | dispositif.Selectable | etablissement.Selectable | familleMetier.Selectable | formation.Selectable | formationEtablissement.Selectable | formationHistorique.Selectable | indicateurEntree.Selectable | indicateurEtablissement.Selectable | indicateurSortie.Selectable | knex_migrations.Selectable | knex_migrations_lock.Selectable | niveauDiplome.Selectable | pg_mate.Selectable | rawData.Selectable | region.Selectable;
    export type JSONSelectable = academie.JSONSelectable | departement.JSONSelectable | dispositif.JSONSelectable | etablissement.JSONSelectable | familleMetier.JSONSelectable | formation.JSONSelectable | formationEtablissement.JSONSelectable | formationHistorique.JSONSelectable | indicateurEntree.JSONSelectable | indicateurEtablissement.JSONSelectable | indicateurSortie.JSONSelectable | knex_migrations.JSONSelectable | knex_migrations_lock.JSONSelectable | niveauDiplome.JSONSelectable | pg_mate.JSONSelectable | rawData.JSONSelectable | region.JSONSelectable;
    export type Whereable = academie.Whereable | departement.Whereable | dispositif.Whereable | etablissement.Whereable | familleMetier.Whereable | formation.Whereable | formationEtablissement.Whereable | formationHistorique.Whereable | indicateurEntree.Whereable | indicateurEtablissement.Whereable | indicateurSortie.Whereable | knex_migrations.Whereable | knex_migrations_lock.Whereable | niveauDiplome.Whereable | pg_mate.Whereable | rawData.Whereable | region.Whereable;
    export type Insertable = academie.Insertable | departement.Insertable | dispositif.Insertable | etablissement.Insertable | familleMetier.Insertable | formation.Insertable | formationEtablissement.Insertable | formationHistorique.Insertable | indicateurEntree.Insertable | indicateurEtablissement.Insertable | indicateurSortie.Insertable | knex_migrations.Insertable | knex_migrations_lock.Insertable | niveauDiplome.Insertable | pg_mate.Insertable | rawData.Insertable | region.Insertable;
    export type Updatable = academie.Updatable | departement.Updatable | dispositif.Updatable | etablissement.Updatable | familleMetier.Updatable | formation.Updatable | formationEtablissement.Updatable | formationHistorique.Updatable | indicateurEntree.Updatable | indicateurEtablissement.Updatable | indicateurSortie.Updatable | knex_migrations.Updatable | knex_migrations_lock.Updatable | niveauDiplome.Updatable | pg_mate.Updatable | rawData.Updatable | region.Updatable;
    export type UniqueIndex = academie.UniqueIndex | departement.UniqueIndex | dispositif.UniqueIndex | etablissement.UniqueIndex | familleMetier.UniqueIndex | formation.UniqueIndex | formationEtablissement.UniqueIndex | formationHistorique.UniqueIndex | indicateurEntree.UniqueIndex | indicateurEtablissement.UniqueIndex | indicateurSortie.UniqueIndex | knex_migrations.UniqueIndex | knex_migrations_lock.UniqueIndex | niveauDiplome.UniqueIndex | pg_mate.UniqueIndex | rawData.UniqueIndex | region.UniqueIndex;
    export type Column = academie.Column | departement.Column | dispositif.Column | etablissement.Column | familleMetier.Column | formation.Column | formationEtablissement.Column | formationHistorique.Column | indicateurEntree.Column | indicateurEtablissement.Column | indicateurSortie.Column | knex_migrations.Column | knex_migrations_lock.Column | niveauDiplome.Column | pg_mate.Column | rawData.Column | region.Column;
  
    export type AllBaseTables = [academie.Table, departement.Table, dispositif.Table, etablissement.Table, familleMetier.Table, formation.Table, formationEtablissement.Table, formationHistorique.Table, indicateurEntree.Table, indicateurEtablissement.Table, indicateurSortie.Table, knex_migrations.Table, knex_migrations_lock.Table, niveauDiplome.Table, pg_mate.Table, rawData.Table, region.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [academie.Table, departement.Table, dispositif.Table, etablissement.Table, familleMetier.Table, formation.Table, formationEtablissement.Table, formationHistorique.Table, indicateurEntree.Table, indicateurEtablissement.Table, indicateurSortie.Table, knex_migrations.Table, knex_migrations_lock.Table, niveauDiplome.Table, pg_mate.Table, rawData.Table, region.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "academie": academie.Selectable;
    "departement": departement.Selectable;
    "dispositif": dispositif.Selectable;
    "etablissement": etablissement.Selectable;
    "familleMetier": familleMetier.Selectable;
    "formation": formation.Selectable;
    "formationEtablissement": formationEtablissement.Selectable;
    "formationHistorique": formationHistorique.Selectable;
    "indicateurEntree": indicateurEntree.Selectable;
    "indicateurEtablissement": indicateurEtablissement.Selectable;
    "indicateurSortie": indicateurSortie.Selectable;
    "knex_migrations": knex_migrations.Selectable;
    "knex_migrations_lock": knex_migrations_lock.Selectable;
    "niveauDiplome": niveauDiplome.Selectable;
    "pg_mate": pg_mate.Selectable;
    "rawData": rawData.Selectable;
    "region": region.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "academie": academie.JSONSelectable;
    "departement": departement.JSONSelectable;
    "dispositif": dispositif.JSONSelectable;
    "etablissement": etablissement.JSONSelectable;
    "familleMetier": familleMetier.JSONSelectable;
    "formation": formation.JSONSelectable;
    "formationEtablissement": formationEtablissement.JSONSelectable;
    "formationHistorique": formationHistorique.JSONSelectable;
    "indicateurEntree": indicateurEntree.JSONSelectable;
    "indicateurEtablissement": indicateurEtablissement.JSONSelectable;
    "indicateurSortie": indicateurSortie.JSONSelectable;
    "knex_migrations": knex_migrations.JSONSelectable;
    "knex_migrations_lock": knex_migrations_lock.JSONSelectable;
    "niveauDiplome": niveauDiplome.JSONSelectable;
    "pg_mate": pg_mate.JSONSelectable;
    "rawData": rawData.JSONSelectable;
    "region": region.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "academie": academie.Whereable;
    "departement": departement.Whereable;
    "dispositif": dispositif.Whereable;
    "etablissement": etablissement.Whereable;
    "familleMetier": familleMetier.Whereable;
    "formation": formation.Whereable;
    "formationEtablissement": formationEtablissement.Whereable;
    "formationHistorique": formationHistorique.Whereable;
    "indicateurEntree": indicateurEntree.Whereable;
    "indicateurEtablissement": indicateurEtablissement.Whereable;
    "indicateurSortie": indicateurSortie.Whereable;
    "knex_migrations": knex_migrations.Whereable;
    "knex_migrations_lock": knex_migrations_lock.Whereable;
    "niveauDiplome": niveauDiplome.Whereable;
    "pg_mate": pg_mate.Whereable;
    "rawData": rawData.Whereable;
    "region": region.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "academie": academie.Insertable;
    "departement": departement.Insertable;
    "dispositif": dispositif.Insertable;
    "etablissement": etablissement.Insertable;
    "familleMetier": familleMetier.Insertable;
    "formation": formation.Insertable;
    "formationEtablissement": formationEtablissement.Insertable;
    "formationHistorique": formationHistorique.Insertable;
    "indicateurEntree": indicateurEntree.Insertable;
    "indicateurEtablissement": indicateurEtablissement.Insertable;
    "indicateurSortie": indicateurSortie.Insertable;
    "knex_migrations": knex_migrations.Insertable;
    "knex_migrations_lock": knex_migrations_lock.Insertable;
    "niveauDiplome": niveauDiplome.Insertable;
    "pg_mate": pg_mate.Insertable;
    "rawData": rawData.Insertable;
    "region": region.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "academie": academie.Updatable;
    "departement": departement.Updatable;
    "dispositif": dispositif.Updatable;
    "etablissement": etablissement.Updatable;
    "familleMetier": familleMetier.Updatable;
    "formation": formation.Updatable;
    "formationEtablissement": formationEtablissement.Updatable;
    "formationHistorique": formationHistorique.Updatable;
    "indicateurEntree": indicateurEntree.Updatable;
    "indicateurEtablissement": indicateurEtablissement.Updatable;
    "indicateurSortie": indicateurSortie.Updatable;
    "knex_migrations": knex_migrations.Updatable;
    "knex_migrations_lock": knex_migrations_lock.Updatable;
    "niveauDiplome": niveauDiplome.Updatable;
    "pg_mate": pg_mate.Updatable;
    "rawData": rawData.Updatable;
    "region": region.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "academie": academie.UniqueIndex;
    "departement": departement.UniqueIndex;
    "dispositif": dispositif.UniqueIndex;
    "etablissement": etablissement.UniqueIndex;
    "familleMetier": familleMetier.UniqueIndex;
    "formation": formation.UniqueIndex;
    "formationEtablissement": formationEtablissement.UniqueIndex;
    "formationHistorique": formationHistorique.UniqueIndex;
    "indicateurEntree": indicateurEntree.UniqueIndex;
    "indicateurEtablissement": indicateurEtablissement.UniqueIndex;
    "indicateurSortie": indicateurSortie.UniqueIndex;
    "knex_migrations": knex_migrations.UniqueIndex;
    "knex_migrations_lock": knex_migrations_lock.UniqueIndex;
    "niveauDiplome": niveauDiplome.UniqueIndex;
    "pg_mate": pg_mate.UniqueIndex;
    "rawData": rawData.UniqueIndex;
    "region": region.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "academie": academie.Column;
    "departement": departement.Column;
    "dispositif": dispositif.Column;
    "etablissement": etablissement.Column;
    "familleMetier": familleMetier.Column;
    "formation": formation.Column;
    "formationEtablissement": formationEtablissement.Column;
    "formationHistorique": formationHistorique.Column;
    "indicateurEntree": indicateurEntree.Column;
    "indicateurEtablissement": indicateurEtablissement.Column;
    "indicateurSortie": indicateurSortie.Column;
    "knex_migrations": knex_migrations.Column;
    "knex_migrations_lock": knex_migrations_lock.Column;
    "niveauDiplome": niveauDiplome.Column;
    "pg_mate": pg_mate.Column;
    "rawData": rawData.Column;
    "region": region.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "academie": academie.SQL;
    "departement": departement.SQL;
    "dispositif": dispositif.SQL;
    "etablissement": etablissement.SQL;
    "familleMetier": familleMetier.SQL;
    "formation": formation.SQL;
    "formationEtablissement": formationEtablissement.SQL;
    "formationHistorique": formationHistorique.SQL;
    "indicateurEntree": indicateurEntree.SQL;
    "indicateurEtablissement": indicateurEtablissement.SQL;
    "indicateurSortie": indicateurSortie.SQL;
    "knex_migrations": knex_migrations.SQL;
    "knex_migrations_lock": knex_migrations_lock.SQL;
    "niveauDiplome": niveauDiplome.SQL;
    "pg_mate": pg_mate.SQL;
    "rawData": rawData.SQL;
    "region": region.SQL;
  }[T];

}

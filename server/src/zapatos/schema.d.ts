/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **famillesMetiers**
   * - Table in database
   */
  export namespace famillesMetiers {
    export type Table = 'famillesMetiers';
    export interface Selectable {
      /**
      * **famillesMetiers.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **famillesMetiers.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille: string;
      /**
      * **famillesMetiers.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite: string;
      /**
      * **famillesMetiers.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle: string;
      /**
      * **famillesMetiers.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille: string;
      /**
      * **famillesMetiers.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite: string;
    }
    export interface JSONSelectable {
      /**
      * **famillesMetiers.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **famillesMetiers.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille: string;
      /**
      * **famillesMetiers.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite: string;
      /**
      * **famillesMetiers.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle: string;
      /**
      * **famillesMetiers.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille: string;
      /**
      * **famillesMetiers.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite: string;
    }
    export interface Whereable {
      /**
      * **famillesMetiers.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **famillesMetiers.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **famillesMetiers.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **famillesMetiers.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **famillesMetiers.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **famillesMetiers.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **famillesMetiers.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **famillesMetiers.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **famillesMetiers.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **famillesMetiers.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **famillesMetiers.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **famillesMetiers.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **famillesMetiers.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **famillesMetiers.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **famillesMetiers.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **famillesMetiers.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **famillesMetiers.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **famillesMetiers.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'famillesMetiers_mefStat11Specialite_key' | 'famillesMetiers_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **formations**
   * - Table in database
   */
  export namespace formations {
    export type Table = 'formations';
    export interface Selectable {
      /**
      * **formations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **formations.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string;
      /**
      * **formations.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp: number;
      /**
      * **formations.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome: string;
      /**
      * **formations.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string;
      /**
      * **formations.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture: Date;
      /**
      * **formations.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **formations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **formations.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string;
      /**
      * **formations.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp: number;
      /**
      * **formations.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome: string;
      /**
      * **formations.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string;
      /**
      * **formations.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture: db.DateString;
      /**
      * **formations.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture: db.DateString | null;
    }
    export interface Whereable {
      /**
      * **formations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formations.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formations.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formations.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formations.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formations.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formations.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **formations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **formations.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formations.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **formations.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formations.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formations.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment;
      /**
      * **formations.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **formations.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **formations.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formations.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **formations.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formations.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formations.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment>;
      /**
      * **formations.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'formations_codeFormationDiplome_key' | 'formations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **knex_migrations**
   * - Table in database
   */
  export namespace knex_migrations {
    export type Table = 'knex_migrations';
    export interface Selectable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch: number | null;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch: number | null;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'knex_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **knex_migrations_lock**
   * - Table in database
   */
  export namespace knex_migrations_lock {
    export type Table = 'knex_migrations_lock';
    export interface Selectable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index: number;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked: number | null;
    }
    export interface JSONSelectable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index: number;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked: number | null;
    }
    export interface Whereable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'knex_migrations_lock_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = famillesMetiers.Table | formations.Table | knex_migrations.Table | knex_migrations_lock.Table;
    export type Selectable = famillesMetiers.Selectable | formations.Selectable | knex_migrations.Selectable | knex_migrations_lock.Selectable;
    export type JSONSelectable = famillesMetiers.JSONSelectable | formations.JSONSelectable | knex_migrations.JSONSelectable | knex_migrations_lock.JSONSelectable;
    export type Whereable = famillesMetiers.Whereable | formations.Whereable | knex_migrations.Whereable | knex_migrations_lock.Whereable;
    export type Insertable = famillesMetiers.Insertable | formations.Insertable | knex_migrations.Insertable | knex_migrations_lock.Insertable;
    export type Updatable = famillesMetiers.Updatable | formations.Updatable | knex_migrations.Updatable | knex_migrations_lock.Updatable;
    export type UniqueIndex = famillesMetiers.UniqueIndex | formations.UniqueIndex | knex_migrations.UniqueIndex | knex_migrations_lock.UniqueIndex;
    export type Column = famillesMetiers.Column | formations.Column | knex_migrations.Column | knex_migrations_lock.Column;
  
    export type AllBaseTables = [famillesMetiers.Table, formations.Table, knex_migrations.Table, knex_migrations_lock.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [famillesMetiers.Table, formations.Table, knex_migrations.Table, knex_migrations_lock.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "famillesMetiers": famillesMetiers.Selectable;
    "formations": formations.Selectable;
    "knex_migrations": knex_migrations.Selectable;
    "knex_migrations_lock": knex_migrations_lock.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "famillesMetiers": famillesMetiers.JSONSelectable;
    "formations": formations.JSONSelectable;
    "knex_migrations": knex_migrations.JSONSelectable;
    "knex_migrations_lock": knex_migrations_lock.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "famillesMetiers": famillesMetiers.Whereable;
    "formations": formations.Whereable;
    "knex_migrations": knex_migrations.Whereable;
    "knex_migrations_lock": knex_migrations_lock.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "famillesMetiers": famillesMetiers.Insertable;
    "formations": formations.Insertable;
    "knex_migrations": knex_migrations.Insertable;
    "knex_migrations_lock": knex_migrations_lock.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "famillesMetiers": famillesMetiers.Updatable;
    "formations": formations.Updatable;
    "knex_migrations": knex_migrations.Updatable;
    "knex_migrations_lock": knex_migrations_lock.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "famillesMetiers": famillesMetiers.UniqueIndex;
    "formations": formations.UniqueIndex;
    "knex_migrations": knex_migrations.UniqueIndex;
    "knex_migrations_lock": knex_migrations_lock.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "famillesMetiers": famillesMetiers.Column;
    "formations": formations.Column;
    "knex_migrations": knex_migrations.Column;
    "knex_migrations_lock": knex_migrations_lock.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "famillesMetiers": famillesMetiers.SQL;
    "formations": formations.SQL;
    "knex_migrations": knex_migrations.SQL;
    "knex_migrations_lock": knex_migrations_lock.SQL;
  }[T];

}

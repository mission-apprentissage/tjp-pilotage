/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **etablissement**
   * - Table in database
   */
  export namespace etablissement {
    export type Table = 'etablissement';
    export interface Selectable {
      /**
      * **etablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **etablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI: string;
      /**
      * **etablissement.siret**
      * - `varchar` in database
      * - Nullable, no default
      */
      siret: string | null;
      /**
      * **etablissement.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie: string;
      /**
      * **etablissement.natureUAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      natureUAI: string;
      /**
      * **etablissement.libelleEtablissement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleEtablissement: string;
      /**
      * **etablissement.adresseEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      adresseEtablissement: string | null;
      /**
      * **etablissement.codePostal**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codePostal: string;
      /**
      * **etablissement.secteur**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      secteur: string;
      /**
      * **etablissement.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture: Date;
      /**
      * **etablissement.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture: Date | null;
      /**
      * **etablissement.codeMinistereTutuelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutuelle: string;
    }
    export interface JSONSelectable {
      /**
      * **etablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **etablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI: string;
      /**
      * **etablissement.siret**
      * - `varchar` in database
      * - Nullable, no default
      */
      siret: string | null;
      /**
      * **etablissement.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie: string;
      /**
      * **etablissement.natureUAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      natureUAI: string;
      /**
      * **etablissement.libelleEtablissement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleEtablissement: string;
      /**
      * **etablissement.adresseEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      adresseEtablissement: string | null;
      /**
      * **etablissement.codePostal**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codePostal: string;
      /**
      * **etablissement.secteur**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      secteur: string;
      /**
      * **etablissement.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture: db.DateString;
      /**
      * **etablissement.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture: db.DateString | null;
      /**
      * **etablissement.codeMinistereTutuelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutuelle: string;
    }
    export interface Whereable {
      /**
      * **etablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.siret**
      * - `varchar` in database
      * - Nullable, no default
      */
      siret?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.natureUAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      natureUAI?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.libelleEtablissement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleEtablissement?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.adresseEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      adresseEtablissement?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.codePostal**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codePostal?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.secteur**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      secteur?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **etablissement.codeMinistereTutuelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutuelle?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **etablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **etablissement.siret**
      * - `varchar` in database
      * - Nullable, no default
      */
      siret?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **etablissement.natureUAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      natureUAI: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **etablissement.libelleEtablissement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleEtablissement: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **etablissement.adresseEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      adresseEtablissement?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.codePostal**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codePostal: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **etablissement.secteur**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      secteur: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **etablissement.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment;
      /**
      * **etablissement.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **etablissement.codeMinistereTutuelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutuelle: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **etablissement.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.UAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      UAI?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **etablissement.siret**
      * - `varchar` in database
      * - Nullable, no default
      */
      siret?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.codeAcademie**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeAcademie?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **etablissement.natureUAI**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      natureUAI?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **etablissement.libelleEtablissement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleEtablissement?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **etablissement.adresseEtablissement**
      * - `varchar` in database
      * - Nullable, no default
      */
      adresseEtablissement?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.codePostal**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codePostal?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **etablissement.secteur**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      secteur?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **etablissement.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment>;
      /**
      * **etablissement.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **etablissement.codeMinistereTutuelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutuelle?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'etablissement_pkey' | 'etablissement_un';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **familleMetier**
   * - Table in database
   */
  export namespace familleMetier {
    export type Table = 'familleMetier';
    export interface Selectable {
      /**
      * **familleMetier.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **familleMetier.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille: string;
      /**
      * **familleMetier.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite: string;
      /**
      * **familleMetier.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle: string;
      /**
      * **familleMetier.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille: string;
      /**
      * **familleMetier.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite: string;
    }
    export interface JSONSelectable {
      /**
      * **familleMetier.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **familleMetier.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille: string;
      /**
      * **familleMetier.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite: string;
      /**
      * **familleMetier.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle: string;
      /**
      * **familleMetier.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille: string;
      /**
      * **familleMetier.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite: string;
    }
    export interface Whereable {
      /**
      * **familleMetier.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **familleMetier.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **familleMetier.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **familleMetier.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **familleMetier.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **familleMetier.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **familleMetier.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **familleMetier.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **familleMetier.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **familleMetier.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **familleMetier.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **familleMetier.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **familleMetier.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **familleMetier.libelleOfficielFamille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielFamille?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **familleMetier.libelleOfficielSpecialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleOfficielSpecialite?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **familleMetier.codeMinistereTutelle**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeMinistereTutelle?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **familleMetier.mefStat11Famille**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Famille?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **familleMetier.mefStat11Specialite**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      mefStat11Specialite?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'familleMetier_mefStat11Specialite_key' | 'familleMetier_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **formation**
   * - Table in database
   */
  export namespace formation {
    export type Table = 'formation';
    export interface Selectable {
      /**
      * **formation.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **formation.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string;
      /**
      * **formation.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp: number;
      /**
      * **formation.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome: string;
      /**
      * **formation.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string;
      /**
      * **formation.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture: Date;
      /**
      * **formation.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **formation.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **formation.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string;
      /**
      * **formation.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp: number;
      /**
      * **formation.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome: string;
      /**
      * **formation.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string;
      /**
      * **formation.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture: db.DateString;
      /**
      * **formation.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture: db.DateString | null;
    }
    export interface Whereable {
      /**
      * **formation.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formation.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formation.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formation.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formation.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formation.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formation.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **formation.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **formation.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formation.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **formation.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formation.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formation.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment;
      /**
      * **formation.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **formation.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **formation.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formation.rncp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      rncp?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **formation.libelleDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formation.codeNiveauDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeNiveauDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formation.dateOuverture**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      dateOuverture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment>;
      /**
      * **formation.dateFermeture**
      * - `date` in database
      * - Nullable, no default
      */
      dateFermeture?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'formation_codeFormationDiplome_key' | 'formation_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **formationHistorique**
   * - Table in database
   */
  export namespace formationHistorique {
    export type Table = 'formationHistorique';
    export interface Selectable {
      /**
      * **formationHistorique.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string;
      /**
      * **formationHistorique.ancienCFD**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ancienCFD: string;
    }
    export interface JSONSelectable {
      /**
      * **formationHistorique.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string;
      /**
      * **formationHistorique.ancienCFD**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ancienCFD: string;
    }
    export interface Whereable {
      /**
      * **formationHistorique.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **formationHistorique.ancienCFD**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ancienCFD?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **formationHistorique.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **formationHistorique.ancienCFD**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ancienCFD: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **formationHistorique.codeFormationDiplome**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      codeFormationDiplome?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **formationHistorique.ancienCFD**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ancienCFD?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'formationhistorique_pk';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **knex_migrations**
   * - Table in database
   */
  export namespace knex_migrations {
    export type Table = 'knex_migrations';
    export interface Selectable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch: number | null;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch: number | null;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **knex_migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **knex_migrations.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **knex_migrations.batch**
      * - `int4` in database
      * - Nullable, no default
      */
      batch?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **knex_migrations.migration_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      migration_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'knex_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **knex_migrations_lock**
   * - Table in database
   */
  export namespace knex_migrations_lock {
    export type Table = 'knex_migrations_lock';
    export interface Selectable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index: number;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked: number | null;
    }
    export interface JSONSelectable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index: number;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked: number | null;
    }
    export interface Whereable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **knex_migrations_lock.index**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('knex_migrations_lock_index_seq'::regclass)`
      */
      index?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **knex_migrations_lock.is_locked**
      * - `int4` in database
      * - Nullable, no default
      */
      is_locked?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'knex_migrations_lock_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **rawData**
   * - Table in database
   */
  export namespace rawData {
    export type Table = 'rawData';
    export interface Selectable {
      /**
      * **rawData.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **rawData.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key: string;
      /**
      * **rawData.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data: db.JSONValue | null;
    }
    export interface JSONSelectable {
      /**
      * **rawData.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **rawData.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key: string;
      /**
      * **rawData.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data: db.JSONValue | null;
    }
    export interface Whereable {
      /**
      * **rawData.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **rawData.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **rawData.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **rawData.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **rawData.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **rawData.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **rawData.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **rawData.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **rawData.data**
      * - `jsonb` in database
      * - Nullable, no default
      */
      data?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'rawData_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **region**
   * - Table in database
   */
  export namespace region {
    export type Table = 'region';
    export interface Selectable {
      /**
      * **region.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **region.libelleRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleRegion: string;
    }
    export interface JSONSelectable {
      /**
      * **region.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **region.libelleRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleRegion: string;
    }
    export interface Whereable {
      /**
      * **region.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **region.libelleRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleRegion?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **region.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **region.libelleRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleRegion: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **region.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **region.libelleRegion**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      libelleRegion?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'region_libelleRegion_key' | 'region_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = etablissement.Table | familleMetier.Table | formation.Table | formationHistorique.Table | knex_migrations.Table | knex_migrations_lock.Table | rawData.Table | region.Table;
    export type Selectable = etablissement.Selectable | familleMetier.Selectable | formation.Selectable | formationHistorique.Selectable | knex_migrations.Selectable | knex_migrations_lock.Selectable | rawData.Selectable | region.Selectable;
    export type JSONSelectable = etablissement.JSONSelectable | familleMetier.JSONSelectable | formation.JSONSelectable | formationHistorique.JSONSelectable | knex_migrations.JSONSelectable | knex_migrations_lock.JSONSelectable | rawData.JSONSelectable | region.JSONSelectable;
    export type Whereable = etablissement.Whereable | familleMetier.Whereable | formation.Whereable | formationHistorique.Whereable | knex_migrations.Whereable | knex_migrations_lock.Whereable | rawData.Whereable | region.Whereable;
    export type Insertable = etablissement.Insertable | familleMetier.Insertable | formation.Insertable | formationHistorique.Insertable | knex_migrations.Insertable | knex_migrations_lock.Insertable | rawData.Insertable | region.Insertable;
    export type Updatable = etablissement.Updatable | familleMetier.Updatable | formation.Updatable | formationHistorique.Updatable | knex_migrations.Updatable | knex_migrations_lock.Updatable | rawData.Updatable | region.Updatable;
    export type UniqueIndex = etablissement.UniqueIndex | familleMetier.UniqueIndex | formation.UniqueIndex | formationHistorique.UniqueIndex | knex_migrations.UniqueIndex | knex_migrations_lock.UniqueIndex | rawData.UniqueIndex | region.UniqueIndex;
    export type Column = etablissement.Column | familleMetier.Column | formation.Column | formationHistorique.Column | knex_migrations.Column | knex_migrations_lock.Column | rawData.Column | region.Column;
  
    export type AllBaseTables = [etablissement.Table, familleMetier.Table, formation.Table, formationHistorique.Table, knex_migrations.Table, knex_migrations_lock.Table, rawData.Table, region.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [etablissement.Table, familleMetier.Table, formation.Table, formationHistorique.Table, knex_migrations.Table, knex_migrations_lock.Table, rawData.Table, region.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "etablissement": etablissement.Selectable;
    "familleMetier": familleMetier.Selectable;
    "formation": formation.Selectable;
    "formationHistorique": formationHistorique.Selectable;
    "knex_migrations": knex_migrations.Selectable;
    "knex_migrations_lock": knex_migrations_lock.Selectable;
    "rawData": rawData.Selectable;
    "region": region.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "etablissement": etablissement.JSONSelectable;
    "familleMetier": familleMetier.JSONSelectable;
    "formation": formation.JSONSelectable;
    "formationHistorique": formationHistorique.JSONSelectable;
    "knex_migrations": knex_migrations.JSONSelectable;
    "knex_migrations_lock": knex_migrations_lock.JSONSelectable;
    "rawData": rawData.JSONSelectable;
    "region": region.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "etablissement": etablissement.Whereable;
    "familleMetier": familleMetier.Whereable;
    "formation": formation.Whereable;
    "formationHistorique": formationHistorique.Whereable;
    "knex_migrations": knex_migrations.Whereable;
    "knex_migrations_lock": knex_migrations_lock.Whereable;
    "rawData": rawData.Whereable;
    "region": region.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "etablissement": etablissement.Insertable;
    "familleMetier": familleMetier.Insertable;
    "formation": formation.Insertable;
    "formationHistorique": formationHistorique.Insertable;
    "knex_migrations": knex_migrations.Insertable;
    "knex_migrations_lock": knex_migrations_lock.Insertable;
    "rawData": rawData.Insertable;
    "region": region.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "etablissement": etablissement.Updatable;
    "familleMetier": familleMetier.Updatable;
    "formation": formation.Updatable;
    "formationHistorique": formationHistorique.Updatable;
    "knex_migrations": knex_migrations.Updatable;
    "knex_migrations_lock": knex_migrations_lock.Updatable;
    "rawData": rawData.Updatable;
    "region": region.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "etablissement": etablissement.UniqueIndex;
    "familleMetier": familleMetier.UniqueIndex;
    "formation": formation.UniqueIndex;
    "formationHistorique": formationHistorique.UniqueIndex;
    "knex_migrations": knex_migrations.UniqueIndex;
    "knex_migrations_lock": knex_migrations_lock.UniqueIndex;
    "rawData": rawData.UniqueIndex;
    "region": region.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "etablissement": etablissement.Column;
    "familleMetier": familleMetier.Column;
    "formation": formation.Column;
    "formationHistorique": formationHistorique.Column;
    "knex_migrations": knex_migrations.Column;
    "knex_migrations_lock": knex_migrations_lock.Column;
    "rawData": rawData.Column;
    "region": region.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "etablissement": etablissement.SQL;
    "familleMetier": familleMetier.SQL;
    "formation": formation.SQL;
    "formationHistorique": formationHistorique.SQL;
    "knex_migrations": knex_migrations.SQL;
    "knex_migrations_lock": knex_migrations_lock.SQL;
    "rawData": rawData.SQL;
    "region": region.SQL;
  }[T];

}

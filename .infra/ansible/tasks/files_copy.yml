---
- name: Création de l'arborescence /opt/app à partir de .infra/files
  file:
    path: "/opt/app/{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
  with_filetree: "{{inventory_dir}}/files"
  when:
    - item.state == 'directory'
    # /app/tools is managed by infra
    - item.path | regex_search('^tools/?') == none
    - item.path | regex_search('^system/?') == none

- name: Copie des fichiers de l'arborescence /opt/app à partir de .infra/files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/opt/app/{{ item.path }}"
    mode: "{{ item.mode }}"
  with_filetree: "{{inventory_dir}}/files"
  when:
    - item.state == 'file'
    - item.path | basename != '.gitkeep'
    - item.path | basename != '.DS_Store'
    # seed.gpg should not be template replaced
    - item.path | basename != 'seed.gpg'
    - item.path | basename != 'seed.gz'
    # /app/tools is managed by infra
    - item.path | regex_search('^tools/?') == none
    - item.path | regex_search('^system/?') == none

# Documentation
- name: Vérification de l'existence du dossier de la documentation
  ansible.builtin.stat:
    path: /path/to/your/folder
  register: dir_check

- name: Suppression du contenu du dossier de la documentation s'il existe
  ansible.builtin.shell: rm -rf /path/to/your/folder/*
  when: dir_check.stat.exists and folder_stat.stat.isdir

- name: Création du dossier de la documentation s'il n'existe pas
  ansible.builtin.file:
    path: /path/to/your/folder
    state: directory
  when: not dir_check.stat.exists

- name: Copie de la documentation produit
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/opt/app/documentation/{{ item.path }}"
    mode: "{{ item.mode }}"
  with_filetree: "{{inventory_dir}}/../documentation"
  when:
    - item.state == 'file'
    - item.path | basename != '.gitkeep'
    - item.path | basename != '.DS_Store'

- name: Assignation des permissions au dossier de la doc pour www-data
  ansible.builtin.file:
    path: /opt/app/documentation
    group: www-data
    recurse: yes
    state: directory

- name: Reconcile SSL certificates
  shell: "bash /opt/app/tools/ssl/reconcile-ssl-certificates.sh"
  register: reconcile_output

- name: Copie du fichier de seed
  ansible.builtin.copy:
    src: "{{inventory_dir}}/files/configs/mongodb/seed.gpg"
    dest: "/opt/app/configs/mongodb/seed.gpg"
    mode: "700"
  when: env_type == 'preview'

- name: copy server env file
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/opt/app/.env_server"
  with_fileglob:
    - "{{inventory_dir}}/.env_server"
  when: env_type != 'preview'

- name: copy ui env file
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/opt/app/.env_ui"
  with_fileglob:
    - "{{inventory_dir}}/.env_ui"
  when: env_type != 'preview'

- name: copy du fichier docker compose
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/opt/app/docker-compose.production.yml"
  with_fileglob:
    - "{{inventory_dir}}/docker-compose.production.yml"
  when: env_type == 'production'

- name: copy du fichier recette docker compose
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/opt/app/docker-compose.recette.yml"
  with_fileglob:
    - "{{inventory_dir}}/docker-compose.recette.yml"
  when: env_type == 'recette'

- name: copy du fichier docker compose générique
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/opt/app/docker-compose.all.yml"
  with_fileglob:
    - "{{inventory_dir}}/docker-compose.all.yml"

- name: creation du fichier docker compose preview system
  ansible.builtin.template:
    src: "{{inventory_dir}}/docker-compose.preview-system.yml"
    dest: "/opt/app/docker-compose.preview-system.yml"
  when: env_type == 'preview'
